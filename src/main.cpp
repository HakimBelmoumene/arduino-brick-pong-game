#include <Arduino.h>
#include <Adafruit_SSD1306.h>
#include <Wire.h>
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define I2C_SDA 34
#define I2C_SCL 33
#define SCREEN_ADDRESS 0x3C
#define OLED_RESET     -1


//declaring varriables
int best_score = 0;
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire,OLED_RESET);
int x_pos = 55;
int y_pos = 55;
int score=0;


int up;
int down;
int left=22;
int right=18;
int beta = 2;
int alpha =0;
int x_ball=63;
int y_ball=42;

int delta_x=0;
int delta_y=1;

const unsigned char solo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xe0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x01, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x1c, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x89, 0x24, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x04, 0x89, 0x42, 0x00, 0x00, 0x00, 0x00, 0x12, 0x05, 0x8d, 0x42, 0x00, 0x00, 0x00, 
	0x00, 0x06, 0x05, 0x89, 0x62, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x9c, 0x89, 0x24, 0x00, 0x00, 0x00, 
	0x00, 0x33, 0xe0, 0x63, 0x98, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 
	0x00, 0x10, 0x00, 0x00, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x80, 0x04, 0x80, 0x00, 0x00, 
	0x00, 0x10, 0x0e, 0x84, 0xe4, 0x4b, 0x18, 0x00, 0x00, 0x10, 0x11, 0x85, 0x34, 0x4c, 0xa2, 0x00, 
	0x00, 0x10, 0x1f, 0x41, 0xf4, 0x48, 0xa2, 0x00, 0x00, 0x10, 0x10, 0x69, 0x04, 0x48, 0xb2, 0x00, 
	0x00, 0x10, 0x10, 0x29, 0x04, 0x48, 0x9c, 0x00, 0x00, 0x10, 0x59, 0x31, 0x94, 0x48, 0xa0, 0x00, 
	0x00, 0x3f, 0xc7, 0x08, 0x64, 0xcd, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0xe9, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x3e, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x40, 0x27, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char sololaugh [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x51, 0x7f, 0xff, 0x7f, 0xfb, 0xd9, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0xfd, 0x81, 0xff, 
	0xff, 0x8c, 0xbf, 0xff, 0xff, 0xff, 0x05, 0xff, 0xfe, 0x92, 0x7f, 0xf7, 0x00, 0xfe, 0xa1, 0xff, 
	0xff, 0xa9, 0xbf, 0xc0, 0x00, 0x3f, 0x06, 0x7f, 0xff, 0xea, 0x7f, 0x00, 0x00, 0x0f, 0x84, 0x7f, 
	0xff, 0xa8, 0xfc, 0x00, 0x00, 0x01, 0x80, 0x7f, 0xff, 0x88, 0xc0, 0x1d, 0xb4, 0x80, 0x00, 0x7f, 
	0xff, 0xc8, 0x01, 0xff, 0xff, 0x80, 0x01, 0x7f, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xa8, 0x00, 0xff, 
	0xff, 0x64, 0x07, 0xfd, 0xf7, 0xb8, 0x02, 0xff, 0xff, 0xe0, 0x07, 0xec, 0xb5, 0xf8, 0x03, 0x7f, 
	0xff, 0xe0, 0x05, 0xbf, 0xfd, 0xb0, 0x12, 0xff, 0xff, 0xe2, 0x09, 0xff, 0xff, 0x71, 0x02, 0x7f, 
	0xff, 0xe0, 0x01, 0xff, 0xff, 0xf0, 0x02, 0x7f, 0xfe, 0xe1, 0x20, 0xfd, 0xff, 0xf2, 0x82, 0x7f, 
	0xff, 0xe0, 0x50, 0xf5, 0x6f, 0xa4, 0xc0, 0x7f, 0xff, 0xc0, 0x48, 0x00, 0x2a, 0x8c, 0x82, 0x7f, 
	0xff, 0xc0, 0xfc, 0x00, 0x00, 0x19, 0x01, 0xff, 0xff, 0x80, 0x2e, 0x00, 0x00, 0x3d, 0x00, 0x7f, 
	0xff, 0x80, 0x3f, 0x00, 0x00, 0x7c, 0x80, 0x7f, 0xff, 0x80, 0x77, 0xe0, 0x02, 0xfa, 0x01, 0x7f, 
	0xff, 0x04, 0x1b, 0xfc, 0x7f, 0xf0, 0x00, 0x7f, 0xff, 0x04, 0x39, 0x7f, 0xff, 0xb0, 0x00, 0x7f, 
	0xff, 0x04, 0x0d, 0xdf, 0xfc, 0xfc, 0x01, 0x7f, 0xff, 0x02, 0x0e, 0xe0, 0x03, 0xf8, 0x09, 0x7f, 
	0xfe, 0x02, 0x07, 0xf7, 0x87, 0xf0, 0x09, 0x7f, 0xfe, 0x02, 0x03, 0xfe, 0xff, 0xf0, 0x09, 0xff, 
	0xfe, 0x83, 0x03, 0xff, 0xff, 0xe0, 0x89, 0x7f, 0xfe, 0x03, 0x01, 0xff, 0xff, 0xc3, 0x88, 0xff, 
	0xff, 0x13, 0x80, 0xff, 0xff, 0x83, 0x0c, 0xff, 0xfe, 0x1b, 0x80, 0x7f, 0xff, 0x07, 0x0c, 0xff, 
	0xfe, 0x1b, 0x80, 0x3f, 0xfc, 0x1f, 0x9c, 0xff, 0xfe, 0x1b, 0xc0, 0x03, 0x80, 0x2f, 0x9c, 0xff, 
	0xfe, 0x1b, 0xc0, 0x00, 0x00, 0x2f, 0x9e, 0x7f, 0xfe, 0x3b, 0xe0, 0x00, 0x00, 0x7f, 0x9e, 0x7f, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


void main_menu(){
  //main menu screen
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(3);
  display.setCursor(32,15);
  display.println(2048);
  display.setCursor(25,5);
  display.setTextSize(1);
  display.println("Welcome Player");
  display.setCursor(32,40);
  display.setTextSize(1);
  display.println("Best Score:");
  display.setCursor(40,50);
  display.println(best_score);
  display.display();
}
void game_start(){
  // screen before starting the game
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(32,30);
  display.println("Ready?");
  display.display();
  delay(800);
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(32,30);
  display.println("Start");
  display.display();
  delay(800);
  display.clearDisplay();

}

void paddle(){
  //the paddle controlled by the player
  
  display.fillRect(x_pos,y_pos,18,4,SSD1306_WHITE);
  display.display();
}

void ball(){
  display.fillCircle(x_ball,y_ball,2,SSD1306_WHITE);
  display.display();
}
//not finished top is to determine if the ball will collide from the top or buttom
void ball_collision(int x, int y, int len, int height, bool top){
  int tmp= x_ball+2;
  int tmp_y = y_ball+2;
  if((tmp>=x||(x_ball+2)<=tmp) && tmp_y==y_pos){
    delta_x+=alpha;
    delta_y=-delta_y;
  }
}

void game_over(){
  // game over screen
  //laughing statue
  display.clearDisplay();
  display.drawBitmap(32,20,sololaugh,64,64,WHITE);
  display.display();
  delay(800);
  //game over text
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10,28);
  display.println("Game Over");
  display.display();
  delay(800);
}

void bricks(){
  for (int i=0;i <= 118; i+=11){
    for(int j=23;j<=38; j+=5 ){
      display.drawRect(i,j,10,4,SSD1306_WHITE);
    }
  }
  display.display();
}
void display_score(){
  display.setCursor(0,0);
  display.setTextColor(WHITE);
  display.setTextSize(2);
  display.printf("score: %d",score);
  display.display();

}

void paddle_control(){
  //controls for the paddle
  if(digitalRead(left) == 1){
    if( x_pos<110){
      x_pos+=10;
      alpha = beta;
    }
    
  }
  else if (digitalRead(right)==1){
    if( x_pos>0){
      x_pos-=10;
      alpha = -beta;
    }
  }
  else{
    alpha=0;
  }
}


void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  //oled.begin(I2C_SDA, I2C_SCL, 100000);
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
// Pause for 2 seconds

  // Clear the buffer
  display.clearDisplay();
  display.drawBitmap(32,0,solo,64,64,WHITE);
  display.display();
  delay(2000);
  display.clearDisplay();
  pinMode(left,INPUT);
  pinMode(right, INPUT);
}

void loop() {
  // put your main code here, to run repeatedly:
  display_score();
  Serial.print("left");
  Serial.println(digitalRead(left));
  Serial.print("right");
  Serial.println(digitalRead(right));
  bricks();
  ball();
  paddle();
  //game_over();
  //paddle_control();
  ball_collision();
  x_ball+=delta_x;
  y_ball+=delta_y;
  display.clearDisplay();
  }


